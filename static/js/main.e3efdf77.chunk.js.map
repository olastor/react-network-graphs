{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["stylesheet","selector","style","label","target-arrow-shape","target-arrow-color","line-color","text-background-opacity","text-background-color","text-background-shape","text-background-padding","target-endpoint","curve-style","text-valign","text-halign","background-color","border-width","border-color","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","network","numberOfNodes","edges","currentNode","intermediateStep","nodesLabeled","nodesScanned","nodesPre","nodePositions","0","x","y","1","2","3","4","5","stepCounter","terminated","previousStates","_this2","toConsumableArray","Array","fill","undefined","map","_","i","data","id","position","classes","concat","includes","_ref","_ref2","slicedToArray","nodeFrom","nodeTo","flow","capacity","source","target","_this3","filter","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","setState","_this4","length","t","augmentingPath","allResidualCapacitiesOnPath","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","_ref13","value","_ref12","push","err","return","maximumAugmentation","Math","min","apply","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop","_ref14","_ref15","objectSpread","_ref16","_ref17","toArray","n1","n2","slice","_iterator2","tempState","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_ref20","_ref19","_ref21","_ref22","defineProperty","node","toString","replace","nodes","_this5","nodeToString","_this6","layout","name","react_default","a","createElement","className","index_es","onClick","handlePrevStep","handleNextStep","JSON","stringify","convertSetOfNodesToLabels","display","width","height","react_cytoscape_default","elements","toCytoscapeNetwork","window","innerHeight","toCytoscapeResidual","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iVAKMA,EAAa,CACjB,CACEC,SAAU,OACVC,MAAO,CACLC,MAAS,cACTC,qBAAsB,WACtBC,qBAAsB,OACtBC,aAAc,OACdC,0BAA2B,EAC3BC,wBAAyB,OACzBC,wBAAyB,iBACzBC,0BAA2B,MAC3BC,kBAAmB,kBACnBC,cAAe,WAGnB,CACEX,SAAU,OACVC,MAAO,CACLC,MAAS,cACTU,cAAe,SACfC,cAAe,SACfC,mBAAoB,OACpBC,eAAgB,EAChBC,eAAgB,SAGpB,CACEhB,SAAU,WACVC,MAAO,CACLa,mBAAoB,YAGxB,CACEd,SAAU,eACVC,MAAO,CACLa,mBAAoB,YAGxB,CACEd,SAAU,WACVC,MAAO,CACLc,eAAgB,EAChBC,eAAgB,YAGpB,CACEhB,SAAU,eACVC,MAAO,CACLI,aAAc,UACdD,qBAAsB,aAwQba,cAjQb,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,QAAS,CAEPC,cAAe,EACfC,MAAO,CAEL,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAGdC,YAAa,KACbC,kBAAkB,EAClBC,aAAc,GACdC,aAAc,GACdC,SAAU,GACVC,cAAe,CACbC,EAAG,CAACC,EAAI,EAAGC,EAAG,IACdC,EAAG,CAACF,EAAI,IAAKC,EAAG,GAChBE,EAAG,CAACH,EAAI,IAAKC,EAAG,KAChBG,EAAG,CAACJ,EAAI,IAAKC,EAAG,GAChBI,EAAG,CAACL,EAAI,IAAKC,EAAG,KAChBK,EAAG,CAACN,EAAI,IAAKC,EAAG,KAElBM,YAAa,EACbC,YAAY,EACZC,eAAgB,IAjCA3B,oFAwCE,IAAA4B,EAAAzB,KACpB,OAAOF,OAAA4B,EAAA,EAAA5B,CAEF,IAAI6B,MAAM3B,KAAKI,MAAMC,QAAQC,eAAesB,UAAKC,GAAWC,IAAI,SAACC,EAAGC,GAAJ,MAAW,CAC5EC,KAAM,CAAEC,GAAIF,EAAGpD,MAAa,IAANoD,EAAU,IAAOA,IAAMP,EAAKrB,MAAMC,QAAQC,cAAgB,EAAI,IAAM0B,GAC1FG,SAAUV,EAAKrB,MAAMS,cAAcmB,GACnCI,QAAO,GAAAC,OAAKZ,EAAKrB,MAAMI,cAAgBwB,EAAI,cAAiBP,EAAKrB,MAAMM,aAAa4B,SAASN,GAAK,WAAa,IAAxGK,OAA8GZ,EAAKrB,MAAMO,aAAa2B,SAASN,GAAK,WAAa,QAL5KK,OAAAvC,OAAA4B,EAAA,EAAA5B,CAQKE,KAAKI,MAAMC,QAAQE,MAAMuB,IAAI,SAAAS,GAAA,IAAAC,EAAA1C,OAAA2C,EAAA,EAAA3C,CAAAyC,EAAA,GAAEG,EAAFF,EAAA,GAAYG,EAAZH,EAAA,GAAoBI,EAApBJ,EAAA,GAA0BK,EAA1BL,EAAA,SAAyC,CACvEP,KAAM,CACJa,OAAQJ,EACRK,OAAQJ,EACR/D,MAAK,GAAAyD,OAAKO,EAAL,KAAAP,OAAaQ,IAEpBT,QAASX,EAAKrB,MAAMQ,SAAS+B,KAAYD,EAAW,cAAgB,sDAQnD,IAAAM,EAAAhD,KACrB,OAAOF,OAAA4B,EAAA,EAAA5B,CAEF,IAAI6B,MAAM3B,KAAKI,MAAMC,QAAQC,eAAesB,UAAKC,GAAWC,IAAI,SAACC,EAAGC,GAAJ,MAAW,CAC5EC,KAAM,CAAEC,GAAIF,EAAGpD,MAAa,IAANoD,EAAU,IAAOA,IAAMgB,EAAK5C,MAAMC,QAAQC,cAAgB,EAAI,IAAM0B,GAC1FG,SAAUa,EAAK5C,MAAMS,cAAcmB,GACnCI,QAAO,GAAAC,OAAKW,EAAK5C,MAAMI,cAAgBwB,EAAI,cAAiBgB,EAAK5C,MAAMM,aAAa4B,SAASN,GAAK,WAAa,IAAxGK,OAA8GW,EAAK5C,MAAMO,aAAa2B,SAASN,GAAK,WAAa,QAL5KK,OAAAvC,OAAA4B,EAAA,EAAA5B,CAQKE,KAAKI,MAAMC,QAAQE,MACnB0C,OAAO,SAAAC,GAAA,IAAAC,EAAArD,OAAA2C,EAAA,EAAA3C,CAAAoD,EAAA,GAAoBN,GAApBO,EAAA,GAAAA,EAAA,GAAAA,EAAA,WAAAA,EAAA,GAAoDP,EAAQ,IACnEd,IAAI,SAAAsB,GAAA,IAAAC,EAAAvD,OAAA2C,EAAA,EAAA3C,CAAAsD,EAAA,GAAEV,EAAFW,EAAA,GAAYV,EAAZU,EAAA,GAAoBT,EAApBS,EAAA,GAA0BR,EAA1BQ,EAAA,SAAyC,CAC5CpB,KAAM,CACJa,OAAQJ,EACRK,OAAQJ,EACR/D,MAAK,GAAAyD,OAAKQ,EAAWD,QAd7B9C,OAAA4B,EAAA,EAAA5B,CAiBKE,KAAKI,MAAMC,QAAQE,MACnB0C,OAAO,SAAAK,GAAA,IAAAC,EAAAzD,OAAA2C,EAAA,EAAA3C,CAAAwD,EAAA,GAAoBV,GAApBW,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,UAAwCX,EAAO,IACtDd,IAAI,SAAA0B,GAAA,IAAAC,EAAA3D,OAAA2C,EAAA,EAAA3C,CAAA0D,EAAA,GAAEd,EAAFe,EAAA,GAAYd,EAAZc,EAAA,GAAoBb,EAApBa,EAAA,GAAAA,EAAA,SAAyC,CAC5CxB,KAAM,CACJa,OAAQH,EACRI,OAAQL,EACR9D,MAAK,GAAAyD,OAAKO,kDAOlB5C,KAAK0D,SAAS,SAAAtD,GAAK,OAAIA,EAAMoB,eAAe,8CAG7B,IAAAmC,EAAA3D,KACf,IAAIA,KAAKI,MAAMmB,WAGf,GAAuC,IAAnCvB,KAAKI,MAAMM,aAAakD,QAAmD,IAAnC5D,KAAKI,MAAMO,aAAaiD,OAApE,CAKA,IAAMC,EAAI7D,KAAKI,MAAMC,QAAQC,cAAgB,EAI7C,GAFAN,KAAK0D,SAAS,SAAAtD,GAAK,MAAK,CAAEoB,eAAc,CAAGpB,GAAHiC,OAAAvC,OAAA4B,EAAA,EAAA5B,CAAaM,EAAMoB,oBAEvDxB,KAAKI,MAAMM,aAAa4B,SAASuB,IAAI,WAIvC,IAFA,IAAIC,EAAiB,CAAED,GACnBrD,EAAcqD,EACK,IAAhBrD,GACLA,EAAcmD,EAAKvD,MAAMQ,SAASJ,GAClCsD,EAAc,CAAKtD,GAAL6B,OAAAvC,OAAA4B,EAAA,EAAA5B,CAAqBgE,IAKrC,IADA,IAAMC,EAA8B,GAC3B/B,EAAI,EAAGA,EAAI8B,EAAeF,OAAQ5B,IAAK,KAAAgC,GAAA,EAAAC,GAAA,EAAAC,OAAArC,EAAA,IAC9C,QAAAsC,EAAAC,EAA+CT,EAAKvD,MAAMC,QAAQE,MAAlE8D,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAyE,KAAAS,EAAAN,EAAAO,MAAAC,EAAA7E,OAAA2C,EAAA,EAAA3C,CAAA2E,EAAA,GAA/D/B,EAA+DiC,EAAA,GAArDhC,EAAqDgC,EAAA,GAA7C/B,EAA6C+B,EAAA,GAAvC9B,EAAuC8B,EAAA,GACvE,GAAIjC,IAAaoB,EAAe9B,IAAMW,IAAWmB,EAAe9B,EAAE,GAAI,CACpE+B,EAA4Ba,KAAK/B,EAAWD,GAC5C,QAJ0C,MAAAiC,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAI,EAAAU,QAAAV,EAAAU,SAAA,WAAAb,EAAA,MAAAC,IAWhD,IAHA,IAAMa,EAAsBC,KAAKC,IAALC,MAAAF,KAAYjB,GAG/B/B,EAAI,EAAGA,EAAI8B,EAAeF,OAAQ5B,IAAK,KAAAmD,GAAA,EAAAC,GAAA,EAAAC,OAAAxD,EAAA,IAC9C,IAD8C,IAC9CyD,EAD8CC,EAAA,eAAAC,EAAAF,EAAAZ,MACpChC,GADoC+C,EAAA3F,OAAA2C,EAAA,EAAA3C,CAAA0F,EAAA,OAC1B7C,EAD0B8C,EAAA,GAClB7C,EADkB6C,EAAA,GACZ5C,EADY4C,EAAA,GAE5C,GAAI/C,IAAaoB,EAAe9B,IAAMW,IAAWmB,EAAe9B,EAAE,GAUhE,OATA2B,EAAKD,SAAS,SAACtD,GAAD,MAAY,CACxBC,QAAQP,OAAA4F,EAAA,EAAA5F,CAAA,GACHM,EAAMC,QADJ,CAELE,MAAMT,OAAA4B,EAAA,EAAA5B,CACDM,EAAMC,QAAQE,MAAM0C,OAAO,SAAA0C,GAAA,IAAAC,EAAA9F,OAAA+F,EAAA,EAAA/F,CAAA6F,GAAEG,EAAFF,EAAA,GAAMG,EAANH,EAAA,GAAAA,EAAAI,MAAA,WAAsBF,IAAOpD,GAAYqD,IAAOpD,MAD3EN,OAAA,CAEH,CAACK,EAAUC,EAAQC,EAAOmC,EAAqBlC,UAIrD,SAXJoD,EAA+CtC,EAAKvD,MAAMC,QAAQE,MAAlE8D,OAAAC,cAAAa,GAAAG,EAAAW,EAAA1B,QAAAC,MAAAW,GAAA,EAAyE,KAAAM,EAAA,aAAAF,IAWrE,OAZ0C,MAAAV,GAAAO,GAAA,EAAAC,EAAAR,EAAA,YAAAM,GAAA,MAAAc,EAAAnB,QAAAmB,EAAAnB,SAAA,WAAAM,EAAA,MAAAC,IAkBhD1B,EAAKD,SAAS,SAACtD,GAQb,IAPA,IAAM8F,EAAY,CAChBtF,SAAU,GACVF,aAAc,CAAE,GAChBC,aAAc,GACdF,kBAAkB,GAGXuB,EAAI,EAAGA,EAAI8B,EAAeF,OAAQ5B,IAAK,KAAAmE,GAAA,EAAAC,GAAA,EAAAC,OAAAxE,EAAA,IAC9C,QAAAyE,EAAAC,EAA+C5C,EAAKvD,MAAMC,QAAQE,MAAlE8D,OAAAC,cAAA6B,GAAAG,EAAAC,EAAAhC,QAAAC,MAAA2B,GAAA,EAAyE,KAAAK,EAAAF,EAAA5B,MAAA+B,EAAA3G,OAAA2C,EAAA,EAAA3C,CAAA0G,EAAA,GAA/D9D,EAA+D+D,EAAA,GAArD9D,EAAqD8D,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACvE,GAAI/D,IAAaoB,EAAe9B,IAAMW,IAAWmB,EAAe9B,EAAE,GAAI,CACpEkE,EAAUtF,SAAS+B,GAAUD,EAC7B,QAJ0C,MAAAmC,GAAAuB,GAAA,EAAAC,EAAAxB,EAAA,YAAAsB,GAAA,MAAAI,EAAAzB,QAAAyB,EAAAzB,SAAA,WAAAsB,EAAA,MAAAC,IAShD,OAAOH,IAzD8B,OA2DlC,CAEL,GAAIlG,KAAKI,MAAMK,iBAMb,YAJAT,KAAK0D,SAAS,CACZjD,kBAAkB,EAClBG,SAAU,KAKd,GAA+B,OAA3BZ,KAAKI,MAAMI,YAEb,YADAR,KAAKI,MAAMI,YAAcR,KAAKI,MAAMM,aAAauC,OAAO,SAAAlC,GAAC,OAAK4C,EAAKvD,MAAMO,aAAa2B,SAASvB,KAAI,IAIrG,IAAMiB,EAAIhC,KAAKI,MAAMI,YAErB,QAAUqB,IAANG,EAEF,YADAhC,KAAK0D,SAAS,CAAEnC,YAAY,IAQ9BvB,KAAKI,MAAMC,QAAQE,MAAMuB,IAAI,SAAA4E,GAAwC,IAAAC,EAAA7G,OAAA2C,EAAA,EAAA3C,CAAA4G,EAAA,GAAtChE,EAAsCiE,EAAA,GAA5BhE,EAA4BgE,EAAA,GAApB/D,EAAoB+D,EAAA,GAAd9D,EAAc8D,EAAA,GAC/DjE,IAAaV,GAAKa,EAAWD,GAAQ,GAAKe,EAAKvD,MAAMM,aAAa4B,SAASK,IAI/EgB,EAAKD,SAAS,SAACtD,GAAD,MAAY,CACxBM,aAAaZ,OAAA4B,EAAA,EAAA5B,CAAKM,EAAMM,cAAZ2B,OAAA,CAA0BM,IACtC/B,SAASd,OAAA4F,EAAA,EAAA5F,CAAA,GACJM,EAAMQ,SADHd,OAAA8G,EAAA,EAAA9G,CAAA,GAEL6C,EAASX,SAKhBhC,KAAK0D,SAAS,SAACtD,GAAD,MAAY,CACxBO,aAAab,OAAA4B,EAAA,EAAA5B,CAAKM,EAAMO,cAAZ0B,OAAA,CAA0BL,IACtCxB,YAAa,QAIjBR,KAAK0D,SAAS,SAAAtD,GAAK,MAAK,CAAEkB,YAAalB,EAAMkB,YAAc,UAlHzDtB,KAAK0D,SAAS,CAAEhD,aAAc,CAAC,0CAqHrBmG,GACZ,MAAsB,kBAATA,GAAqC,kBAATA,EAA2B,GAC7DA,EAAKC,WAAWC,QAAQ,IAAK,KAAKA,SAAS/G,KAAKI,MAAMC,QAAQC,cAAgB,GAAGwG,WAAY,uDAG3EE,GAAO,IAAAC,EAAAjH,KAChC,OAAOgH,EAAMlF,IAAI,SAAAf,GAAC,OAAIkG,EAAKC,aAAanG,sCAGhC,IAAAoG,EAAAnH,KACFoH,EAAS,CAAEC,KAAM,UACvB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,QAAS,kBAAMR,EAAKS,mBAA5B,aACAN,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,QAAS,kBAAMR,EAAKU,mBAA5B,aACAP,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAAA,SAAIxH,KAAKI,MAAMkB,aAA3B,IAA6CtB,KAAKI,MAAMmB,WAAa,eAAiB,IACtF+F,EAAAC,EAAAC,cAAA,wBAAgBM,KAAKC,UAAU/H,KAAKgI,0BAA0BhI,KAAKI,MAAMM,gBACzE4G,EAAAC,EAAAC,cAAA,wBAAgBM,KAAKC,UAAU/H,KAAKgI,0BAA0BhI,KAAKI,MAAMO,gBACzE2G,EAAAC,EAAAC,cAAA,6BAAqBxH,KAAKkH,aAAalH,KAAKI,MAAMI,cAClD8G,EAAAC,EAAAC,cAAA,OAAK7I,MAAO,CAAEsJ,QAAS,OAAQC,MAAO,OAAQC,OAAQ,uBACpDb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CACEc,SAAUrI,KAAKsI,qBACflB,OAAQA,EACR3I,WAAYA,EACZE,MAAQ,CAAEuJ,MAAO,OAAQC,OAAQI,OAAOC,eAE1ClB,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CACEc,SAAUrI,KAAKyI,sBACfrB,OAAQA,EACR3I,WAAYA,EACZE,MAAQ,CAAEuJ,MAAO,OAAQC,OAAQI,OAAOC,wBA3PlCE,aChDEC,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e3efdf77.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport { Button } from '@material-ui/core';\n\nconst stylesheet = [\n  {\n    selector: 'edge',\n    style: {\n      'label': 'data(label)',\n      'target-arrow-shape': 'triangle',\n      'target-arrow-color': '#aaa',\n      'line-color': '#aaa',\n      'text-background-opacity': 1,\n      'text-background-color': '#fff',\n      'text-background-shape': 'roundrectangle',\n      'text-background-padding': '3px',\n      'target-endpoint': 'outside-to-line',\n      'curve-style': 'bezier'\n    }\n  },\n  {\n    selector: 'node',\n    style: {\n      'label': 'data(label)',\n      'text-valign': 'center',\n      'text-halign': 'center',\n      'background-color': '#fff',\n      'border-width': 1,\n      'border-color': '#000'\n    }\n  },\n  {\n    selector: '.labeled',\n    style: {\n      'background-color': '#29b6f6'\n    }\n  },\n  {\n    selector: '.currentNode',\n    style: {\n      'background-color': '#283593'\n    }\n  },\n  {\n    selector: '.scanned',\n    style: {\n      'border-width': 3,\n      'border-color': '#33691e'\n    }\n  },\n  {\n    selector: '.marked-edge',\n    style: {\n      'line-color': '#689f38',\n      'target-arrow-color': '#689f38',\n    }\n  }\n];\n\nclass App extends Component {\n\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      network: {\n        // 0 is source, 5 is sink\n        numberOfNodes: 6,\n        edges: [\n          // [nodeFrom, NodeTo, flow, capacity]\n          [0, 1, 0, 5],\n          [0, 2, 0, 6],\n          [1, 3, 0, 1],\n          [1, 4, 0, 2],\n          [2, 4, 0, 1],\n          [3, 5, 0, 2],\n          [4, 5, 0, 3]\n        ]\n      },\n      currentNode: null,\n      intermediateStep: false, // flag add an intermediate step to mark augmenting path\n      nodesLabeled: [],\n      nodesScanned: [],\n      nodesPre: {},\n      nodePositions: {\n        0: {x : 0, y: 50},\n        1: {x : 100, y: 0},\n        2: {x : 100, y: 100},\n        3: {x : 200, y: 0},\n        4: {x : 200, y: 100},\n        5: {x : 300, y: 50}\n      },\n      stepCounter: 0,\n      terminated: false,\n      previousStates: []\n    };\n  }\n\n  /**\n   * Creates data structure for drawing network with cytoscape.\n   */\n  toCytoscapeNetwork () {\n    return [\n      // nodes\n      ...new Array(this.state.network.numberOfNodes).fill(undefined).map((_, i) => ({\n        data: { id: i, label: i === 0 ? 's' : (i === this.state.network.numberOfNodes - 1 ? 't' : i) },\n        position: this.state.nodePositions[i],\n        classes: `${this.state.currentNode === i ? 'currentNode' : (this.state.nodesLabeled.includes(i) ? 'labeled ' : '')}${this.state.nodesScanned.includes(i) ? 'scanned ' : ''}`\n      })),\n      // edges\n      ...this.state.network.edges.map(([nodeFrom, nodeTo, flow, capacity]) => ({\n        data: {\n          source: nodeFrom,\n          target: nodeTo,\n          label: `${flow}/${capacity}`\n        },\n        classes: this.state.nodesPre[nodeTo] === nodeFrom ? 'marked-edge' : ''\n      }))\n    ];\n  }\n\n  /**\n   * Creates data structure for drawing residual network with cytoscape.\n   */\n  toCytoscapeResidual () {\n    return [\n      // nodes\n      ...new Array(this.state.network.numberOfNodes).fill(undefined).map((_, i) => ({\n        data: { id: i, label: i === 0 ? 's' : (i === this.state.network.numberOfNodes - 1 ? 't' : i) },\n        position: this.state.nodePositions[i],\n        classes: `${this.state.currentNode === i ? 'currentNode' : (this.state.nodesLabeled.includes(i) ? 'labeled ' : '')}${this.state.nodesScanned.includes(i) ? 'scanned ' : ''}`\n      })),\n      // edges\n      ...this.state.network.edges\n        .filter(([nodeFrom, nodeTo, flow, capacity]) => (capacity - flow) > 0)\n        .map(([nodeFrom, nodeTo, flow, capacity]) => ({\n          data: {\n            source: nodeFrom,\n            target: nodeTo,\n            label: `${capacity - flow}`\n          }\n        })),\n      ...this.state.network.edges\n        .filter(([nodeFrom, nodeTo, flow, capacity]) => flow > 0)\n        .map(([nodeFrom, nodeTo, flow, capacity]) => ({\n          data: {\n            source: nodeTo,\n            target: nodeFrom,\n            label: `${flow}`\n          }\n        }))\n    ];\n  }\n\n  handlePrevStep() {\n    this.setState(state => state.previousStates[0])\n  }\n\n  handleNextStep() {\n    if (this.state.terminated) return;\n\n    // label source\n    if (this.state.nodesLabeled.length === 0 && this.state.nodesScanned.length === 0) {\n      this.setState({ nodesLabeled: [0] });\n      return\n    }\n\n    const t = this.state.network.numberOfNodes - 1;\n\n    this.setState(state => ({ previousStates: [state, ...state.previousStates] }));\n\n    if (this.state.nodesLabeled.includes(t)) {\n      // augment\n      let augmentingPath = [ t ];\n      let currentNode = t;\n      while (currentNode !== 0) {\n        currentNode = this.state.nodesPre[currentNode];\n        augmentingPath = [ currentNode, ...augmentingPath ];\n      }\n\n      // find maximum augmentation\n      const allResidualCapacitiesOnPath = [];\n      for (let i = 0; i < augmentingPath.length; i++) {\n        for (let [nodeFrom, nodeTo, flow, capacity] of this.state.network.edges) {\n          if (nodeFrom === augmentingPath[i] && nodeTo === augmentingPath[i+1]) {\n            allResidualCapacitiesOnPath.push(capacity - flow);\n            break;\n          }\n        }\n      }\n      const maximumAugmentation = Math.min(...allResidualCapacitiesOnPath);\n\n      // augment path\n      for (let i = 0; i < augmentingPath.length; i++) {\n        for (let [nodeFrom, nodeTo, flow, capacity] of this.state.network.edges) {\n          if (nodeFrom === augmentingPath[i] && nodeTo === augmentingPath[i+1]) {\n            this.setState((state) => ({\n              network: {\n                ...state.network,\n                edges: [\n                  ...state.network.edges.filter(([n1, n2, ...r]) => !(n1 === nodeFrom && n2 === nodeTo)),\n                  [nodeFrom, nodeTo, flow + maximumAugmentation, capacity]\n                ]\n              }\n            }))\n            break;\n          }\n        }\n      }\n\n      // reset\n      this.setState((state) => {\n        const tempState = {\n          nodesPre: {},\n          nodesLabeled: [ 0 ],\n          nodesScanned: [],\n          intermediateStep: true\n        };\n\n        for (let i = 0; i < augmentingPath.length; i++) {\n          for (let [nodeFrom, nodeTo, flow, capacity] of this.state.network.edges) {\n            if (nodeFrom === augmentingPath[i] && nodeTo === augmentingPath[i+1]) {\n              tempState.nodesPre[nodeTo] = nodeFrom;\n              break;\n            }\n          }\n        }\n\n        return tempState;\n      });\n    } else {\n      // label\n      if (this.state.intermediateStep) {\n        // reset nodesPre if intermediate step flag is set\n        this.setState({\n          intermediateStep: false,\n          nodesPre: {}\n        });\n        return;\n      }\n\n      if (this.state.currentNode === null) {\n        this.state.currentNode = this.state.nodesLabeled.filter(x => !this.state.nodesScanned.includes(x))[0];\n        return;\n      }\n\n      const i = this.state.currentNode;\n\n      if (i === undefined) {\n        this.setState({ terminated: true });\n        return;\n      }\n\n      // scan all nodes that\n      //   - can be reached from i,\n      //   - via a flow > 0,\n      //   - and are unlabeld\n      this.state.network.edges.map(([nodeFrom, nodeTo, flow, capacity]) => {\n        if (nodeFrom !== i || capacity - flow <= 0 || this.state.nodesLabeled.includes(nodeTo)) {\n          return;\n        }\n\n        this.setState((state) => ({\n          nodesLabeled: [...state.nodesLabeled, nodeTo],\n          nodesPre: {\n            ...state.nodesPre,\n            [nodeTo]: i\n          }\n        }));\n      });\n\n      this.setState((state) => ({\n        nodesScanned: [...state.nodesScanned, i],\n        currentNode: null\n      }));\n    }\n\n    this.setState(state => ({ stepCounter: state.stepCounter + 1 }));\n  }\n\n  nodeToString (node) {\n    if (!(typeof node === 'string' || typeof node === 'number')) return '';\n    return node.toString().replace('0', 's').replace((this.state.network.numberOfNodes - 1).toString(), 't');\n  }\n\n  convertSetOfNodesToLabels (nodes) {\n    return nodes.map(x => this.nodeToString(x));\n  }\n\n  render () {\n    const layout = { name: 'preset' };\n    return (\n      <div className='graphApp'>\n        <Button onClick={() => this.handlePrevStep()}>Prev Step</Button>\n        <Button onClick={() => this.handleNextStep()}>Next Step</Button>\n        <span>Step: <b>{this.state.stepCounter}</b> {this.state.terminated ? '(TERMINATED)' : ''}</span>\n        <span>LABELED: {JSON.stringify(this.convertSetOfNodesToLabels(this.state.nodesLabeled))}</span>\n        <span>SCANNED: {JSON.stringify(this.convertSetOfNodesToLabels(this.state.nodesScanned))}</span>\n        <span>CURRENT NODE: {this.nodeToString(this.state.currentNode)}</span>\n        <div style={{ display: 'flex', width: '100%', height: 'calc(100% - 100px)'}}>\n          <CytoscapeComponent\n            elements={this.toCytoscapeNetwork()}\n            layout={layout}\n            stylesheet={stylesheet}\n            style={ { width: '100%', height: window.innerHeight } }\n          />\n          <CytoscapeComponent\n            elements={this.toCytoscapeResidual()}\n            layout={layout}\n            stylesheet={stylesheet}\n            style={ { width: '100%', height: window.innerHeight } }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}